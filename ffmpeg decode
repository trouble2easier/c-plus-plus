//ffmpeg解码器
ffmpeg解码函数
av_register_all()注册所有组件
avformat_open_input()打开输入视频文件
avformat_find_stream_info()获取视频文件信息
avcodec_find_decoder()查找解码器
avcodec_open2()从输入文件读取一帧压缩数据
av_read_frame()从输入文件读取一帧压缩数据
avcodec_decode_video2()解码一帧压缩数据
avcodec_close()关闭解码器
avformat_close_input()关闭输入视频问阿金
解码的数据结构：
avformatContext上下文信息------
{
iformat
nb_streams输入视频的avstream组的个数
streams输入视频的AVsteam组
duration输入视频的时长
bit_rate输入视频的码率
}
avinputformat封装格式-----
{
name 封装格式名称
long_name封账格式的长名称
extensions封装格式的扩展名
id封装格id
接口函数
}
avstream[0]视频流
avcodec编码格式----------
AVstream[1]音频流
{
id:序号
codec：该流对应的avcodecContext
time_base:该流的时基
r_frame_rate:该流的帧率
}
avpacket-解码-avframe
avCodecContext---------------
{
codec：编解码器的avcodec
width，height
pix_fmt：像素格式
sample_rate:采样率
channels：声道数
sample_fmt:采样格式
}
avcodec-------------
{
name:编解码器名称
long_name:编解码器长名称
type:编解码器类型
id:编解码器id
一些编解码的接口名称
}
AVPacket
{
pts:显示时间戳
dts:解码时间戳
data：压缩编码数据
size:压缩编码数据大小
stream_index:所属的avStream
}
AvFrame:
{
data:解码后的图像像素数据（音频采样数据）
linsize:对数据来说是图像中一行像素的大小；
对音频来说是整个音频帧的大小
width,height：图像的宽高（只针对视频）
key_frame:是否为关键帧（只针对视频）
pict_type:帧类型（只针对视频）
}

输出*.h264文件
File *fp_264=fopen("xx.264","wb+");//打开文件
对每帧，
fwrite(packet->data,1,packet-size,fp_264);
数据，每次1个，size次，文件指针
输出*.yuv文件同上
file*fp_yuv=fopen("*.yuv","");
fwrite(pframeYUV->data[0],1,wdith*height,fp_yuv);
fwrite(pFrameYUV-data[1],1,width*height/4,fp_yuv);
